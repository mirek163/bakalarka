 try:
            x, y = 2, 4  # Grid size

            gen_imgs = np.empty((x * y, self.img_rows, self.img_cols, self.channels))

            for i in range(x):
                for j in range(y):
                    noise = np.random.normal(0, 1, (x * y, self.LATENT_DIM))
                    seed = np.random.randint(0, 1000)

                    if noise_type == 'perlin':
                        perlin_noise = np.empty((1, self.LATENT_DIM))
                        for k in range(self.LATENT_DIM):
                            perlin_noise[0, k] = ns.pnoise2(i / x, j / y, base=seed)
                        noise = perlin_noise

                    elif noise_type == 'simplex':
                        simplex_noise = np.empty((1, self.LATENT_DIM))
                        for k in range(self.LATENT_DIM):
                            simplex_noise[0, k] = ns.snoise2(i / x, j / y, base=seed)
                        noise = simplex_noise


                    gen_img = self.generator.predict(noise)
                    gen_imgs[i * y + j] = gen_img[0]

            # Přizpůsobení rozsahu obrázků na 0 - 1 pro tanh
            gen_imgs = (gen_imgs + 1) / 2



            fig, axs = plt.subplots(x, y)
            cnt = 0
            for i in range(x):
                for j in range(y):
                    axs[i, j].imshow(gen_imgs[cnt])
                    axs[i, j].axis('off')
                    cnt += 1

            output_dir = "data/output/" + noise_type
            print("Dostanu se sem2.")

            os.makedirs(output_dir, exist_ok=True)  # Vytvoření výstupního adresáře, pokud neexistuje
            fig.savefig(os.path.join(output_dir, "n_%d.png" % epoch))
            plt.close()

            fig, axs = plt.subplots(x, y)
            cnt = 0
            for i in range(x):
                for j in range(y):
                    axs[i, j].imshow(
                        noise[cnt, :].reshape(
                            (int(np.sqrt(self.LATENT_DIM)), int(np.sqrt(self.LATENT_DIM)))),
                        cmap='gray')
                    axs[i, j].axis('off')
                    cnt += 1